/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint jsx-a11y/click-events-have-key-events:"off", jsx-a11y/no-noninteractive-element-interactions:"off" */
import { Dispatch, FC, SetStateAction, useContext, useRef } from 'react';

import extractByRef from '@/shared/common/lib/utils/extractByRef';
import { UserDataContext, EUserDataStatus } from '@/shared/common/lib/user/userData';
import { INovelSearch } from '@/shared/common/model';
import { isMobile } from 'react-device-detect';

import MarketPlaceAuthorFilter from '@/features/Market/MarketPlaceAuthorFilter';

import './MarketPlaceSearch.scss';

interface IMarketPlaceSearch {
  defaultSearch: INovelSearch;
  search: INovelSearch;
  setSearch: Dispatch<SetStateAction<INovelSearch>>;
  hidden: boolean;
  setHidden: Dispatch<SetStateAction<boolean>>;
}

const MarketPlaceSearch: FC<IMarketPlaceSearch> = ({ defaultSearch, search, setSearch, hidden, setHidden }) => {
  const { userData } = useContext(UserDataContext);
  const filtersForm = useRef<HTMLFormElement>(null);
  const curTimeout = useRef<NodeJS.Timeout | null>(null);

  const extractData = () => {
    const extracted = extractByRef(filtersForm) as INovelSearch;

    if (extracted.author && extracted.author !== defaultSearch.author) {
      extracted.userID = userData.id;
    }

    setSearch(extracted);
  };

  // This prevents form requests spamming.
  function handleNameChange() {
    if (isMobile) {
      return;
    }

    if (curTimeout.current) {
      clearTimeout(curTimeout.current);
    }

    curTimeout.current = setTimeout(extractData, 1000);
  }

  const onFieldChange = isMobile ? () => null : extractData;

  let searchLabel = <h3>–ü–æ–∏—Å–∫</h3>;
  if (isMobile) {
    searchLabel = hidden ? (
      <div className="marketSearchMobileItem">
        <img src="/icons/searchActive.png" alt="–ü–æ–∏—Å–∫" />
        <p style={{ opacity: 1, margin: 0 }} className="marketSearchMobileLabel">
          –ü–æ–∏—Å–∫
        </p>
      </div>
    ) : (
      <p style={{ marginLeft: 0 }} className="marketSearchMobileLabel">
        –°–∫—Ä—ã—Ç—å
      </p>
    );
  }

  return (
    <aside
      className={`marketPlaceDiv ${hidden ? 'hiddenFilters' : 'shownFilters'} ${
        isMobile ? 'marketFiltersMobile' : ''
      }`}
    >
      <button className="marketPlaceDivHeader" onClick={() => setHidden(!hidden)} type="button">
        {searchLabel}
        {isMobile && <p>‚®â</p>}
        <div className="visibilityToggler">
          <img src="/icons/arrowleft.png" alt="" />
          <img src="/icons/arrowright.png" alt="–ü–æ–∫–∞–∑–∞—Ç—å" />
        </div>
      </button>
      <form
        className="marketFilters"
        onSubmit={(e) => {
          e?.preventDefault();
          if (isMobile) {
            setHidden(true);
          }

          setSearch(extractByRef(filtersForm) as INovelSearch);
        }}
        ref={filtersForm}
      >
        <div className="marketFilterDiv filterDivInput marketSearchInput">
          <input
            type="text"
            inputMode="search"
            name="title"
            placeholder="üîç  –ò—Å–∫–∞—Ç—å –Ω–æ–≤–µ–ª–ª—ã..."
            onChange={handleNameChange}
            defaultValue={search.title || ''}
          />
        </div>
        <div className="marketFilterDiv selectDivInput">
          <select
            name="genre"
            // @ts-ignore
            placeholder="–ñ–∞–Ω—Ä..."
            className="marketFilterSelector"
            onChange={onFieldChange}
            defaultValue={search.genre}
          >
            <option value="–õ—é–±–æ–π –∂–∞–Ω—Ä">–õ—é–±–æ–π –∂–∞–Ω—Ä</option>
            <option value="–†–æ–º–∞–Ω—Ç–∏–∫–∞">–†–æ–º–∞–Ω—Ç–∏–∫–∞</option>
            <option value="–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞">–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞</option>
            <option value="–•–æ—Ä—Ä–æ—Ä—ã">–•–æ—Ä—Ä–æ—Ä—ã</option>
            <option value="–ö–æ–º–µ–¥–∏—è">–ö–æ–º–µ–¥–∏—è</option>
          </select>
        </div>
        <div className="marketFilterDiv selectDivInput">
          <MarketPlaceAuthorFilter
            onFieldChange={onFieldChange}
            authenticated={userData.status === EUserDataStatus.AUTHENTICATED}
          />
        </div>
        <div className="marketFilterDiv">
          <div className="marketFilterDivSortLabel">
            <p>–°–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ</p>
            <img src="/icons/sort.png" alt="sort" />
          </div>
          <div className="marketFilterDiv selectDivInput">
            <select
              name="sortBy"
              // @ts-ignore
              placeholder="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å..."
              className="marketFilterSelector"
              onChange={onFieldChange}
              defaultValue={search.sortBy}
            >
              <option value="–û–±—Å—É–∂–¥–∞–µ–º–æ—Å—Ç–∏">–û–±—Å—É–∂–¥–∞–µ–º–æ—Å—Ç–∏</option>
              <option value="–û—Ü–µ–Ω–∫–∞–º">–û—Ü–µ–Ω–∫–∞–º</option>
              <option value="–ù–æ–≤–∏–∑–Ω–µ">–ù–æ–≤–∏–∑–Ω–µ</option>
            </select>
          </div>
        </div>
        {/* <div className="marketFilterDiv selectDivInput">
          <select
            name="ready"
            placeholder="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"
            className="marketFilterSelector"
            onChange={searchNovels}
          >
            <option value="no">–¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –Ω–æ–≤–µ–ª–ª—ã</option>
            <option value="yes">–í–∫–ª—é—á–∞—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</option>
          </select>
        </div> */}
        {isMobile ? (
          <button className="niceButton" type="submit">
            –ù–∞–π—Ç–∏
          </button>
        ) : (
          <div />
        )}
      </form>
    </aside>
  );
}

export default MarketPlaceSearch;
